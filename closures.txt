Closures:-

1. Create a function called toggler using closures
function toggler(){ ... }
const toggle = toggler(1,2,3)
toggle() // 1 toggle() // 2 toggle() // 3 // the next time you toggle it the output is 1 
toggle() // 1 toggle() // 2
A. function toggle() {
    const a = 1;
    const b = 2;
    const c = 3;
    console.log(a);
    return function toggle() {
        console.log(b);
        return function toggle() {
            console.log(3);
        }
    }
}
let t = toggle();
t = t();
t = t();


2. What are IIFE?
A. An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. 
It is a design pattern which is also known as a Self-Executing Anonymous Function and contains two major parts:
The first is the anonymous function with lexical scope enclosed within the Grouping Operator (). This prevents accessing variables within the IIFE idiom as well as polluting the global scope.
The second part creates the immediately invoked function expression () through which the JavaScript engine will directly interpret the function.
(() => {
  let a = "String";
  console.log(a);
})();


3. What is currying?
A. Currying simply means evaluating functions with multiple arguments and decomposing them into a sequence of functions with a single argument.
In other terms, currying is when a function — instead of taking all arguments at one time — takes the first one and returns a new function, which takes the second one and returns a new function, which takes the third one, etc. until all arguments are completed.
There are several reasons why currying is ideal:
Currying is a checking method to make sure that you get everything you need before you proceed
It helps you to avoid passing the same variable again and again
It divides your function into multiple smaller functions that can handle one responsibility. This makes your function pure and less prone to errors and side effects
It is used in functional programming to create a higher-order function
const addCurry =(a) => {
    return (b)=>{
        return (c)=>{
            return a+b+c
        }
    }
}
console.log(addCurry(2)(3)(5)) // 10


4. Write a program to throttle using closures ?
A. function throttler( callback, duration ){
    var flag = true;
    return function () {
        let context = this, args = arguments;
        if(flag){
            callback.apply(this, args);
            flag = false;
            setTimeout(() => {
                flag = true;
            }, duration);
        }
    }
}
document.addEventListener("element", throttler( callback, 1000 ))


5. Explain some areas where you have seen currying being implemented in React / other libraries?
A. const MyComponent = (props) => {
  const onClickHandler = (somearg) => (e) => {
       console.log(`somearg passed successfully is ${somearg}`)
  };
  return (
    <div onClick={onClickHandler(somearg)}>
    </div>
  );
};
export default MyComponent;